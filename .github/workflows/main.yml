on:
  push:
    branches:
    - main
    - arm64-support
  pull_request:
    branches:
    - main

name: main
jobs:
  linux:
    name: 'Linux'
    container:
      image: ubuntu:16.04
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: ./install.dependencies.sh
      working-directory: build/linux

    - name: Clone ImageMagick libraries
      run: ./checkout.sh linux ../../../artifacts
      working-directory: src/ImageMagick

    - name: Build libraries
      run: ../../../build/linux/build.libraries.sh ../../../build/libraries
      working-directory: src/ImageMagick/libraries

    - name: Build ImageMagick
      run: ../../../build/linux/build.ImageMagick.sh
      working-directory: src/ImageMagick/libraries

    - name: Build Native
      run: ../../build/linux/build.Native.sh
      working-directory: src/Magick.Native

    - name: Copy Native
      run: ../../build/linux/copy.Native.sh ../../artifacts
      working-directory: src/Magick.Native

    - name: Upload library
      uses: actions/upload-artifact@v1
      with:
        name: linux
        path: artifacts

  linux_openmp:
    name: 'Linux OpenMP'
    container:
      image: ubuntu:16.04
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: ./install.dependencies.sh
      working-directory: build/linux-openmp

    - name: Clone ImageMagick libraries
      run: ./checkout.sh linux ../../../artifacts
      working-directory: src/ImageMagick

    - name: Build libraries
      run: ../../../build/linux-openmp/build.libraries.sh ../../../build/libraries
      working-directory: src/ImageMagick/libraries

    - name: Build ImageMagick
      run: ../../../build/linux-openmp/build.ImageMagick.sh
      working-directory: src/ImageMagick/libraries

    - name: Build Native
      run: ../../build/linux-openmp/build.Native.sh
      working-directory: src/Magick.Native

    - name: Copy Native
      run: ../../build/linux-openmp/copy.Native.sh ../../artifacts
      working-directory: src/Magick.Native

    - name: Upload library
      uses: actions/upload-artifact@v1
      with:
        name: linux-openmp
        path: artifacts

  linux_musl:
    name: 'Linux musl'
    container:
      image: alpine:3.12
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: ./install.dependencies.sh
      working-directory: build/linux-musl

    - name: Clone ImageMagick libraries
      run: ./checkout.sh linux ../../../artifacts
      working-directory: src/ImageMagick

    - name: Build libraries
      run: ../../../build/linux-musl/build.libraries.sh ../../../build/libraries
      working-directory: src/ImageMagick/libraries

    - name: Build ImageMagick
      run: ../../../build/linux-musl/build.ImageMagick.sh
      working-directory: src/ImageMagick/libraries

    - name: Build Native
      run: ../../build/linux-musl/build.Native.sh
      working-directory: src/Magick.Native

    - name: Copy Native
      run: ../../build/linux-musl/copy.Native.sh ../../artifacts
      working-directory: src/Magick.Native

    - name: Upload library
      uses: actions/upload-artifact@v1
      with:
        name: linux-musl
        path: artifacts

  linux_arm64:
    name: 'Linux-Arm64'
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - run: docker run --rm -t arm64v8/ubuntu uname -m
    - run: docker build --platform linux/arm64/v8 -f src/ImageMagick/build/Arm64.Dockerfile . -t temp
    - run: docker run -v $(pwd)/artifacts/:/artifacts/ temp

    - name: Upload library
      uses: actions/upload-artifact@v1
      with:
        name: linux-arm64
        path: artifacts

  macos:
    name: 'MacOS'
    runs-on: macos-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: ./install.dependencies.sh
      working-directory: build/macos

    - name: Clone ImageMagick libraries
      run: ./checkout.sh macos ../../../artifacts
      working-directory: src/ImageMagick

    - name: Build libraries
      run: ../../../build/macos/build.libraries.sh ../../../build/libraries
      working-directory: src/ImageMagick/libraries

    - name: Build ImageMagick
      run: ../../../build/macos/build.ImageMagick.sh
      working-directory: src/ImageMagick/libraries

    - name: Build Native
      run: ../../build/macos/build.Native.sh
      working-directory: src/Magick.Native

    - name: Copy Native
      run: ../../build/macos/copy.Native.sh ../../artifacts
      working-directory: src/Magick.Native

    - name: Upload library
      uses: actions/upload-artifact@v1
      with:
        name: macos
        path: artifacts

  windows:
    name: 'Windows'
    runs-on: windows-latest

    strategy:
      matrix:
        quantumName: [Q8, Q8-OpenMP, Q16, Q16-OpenMP, Q16-HDRI, Q16-HDRI-OpenMP]
        platformName: [x86, x64]
        exclude:
        - quantumName: Q8-OpenMP
          platformName: x86
        - quantumName: Q16-OpenMP
          platformName: x86
        - quantumName: Q16-HDRI-OpenMP
          platformName: x86

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: ./install.dependencies.ps1
      working-directory: build/windows

    - name: Clone ImageMagick libraries
      run: ./checkout.cmd ../../../artifacts/windows
      working-directory: src/ImageMagick

    - name: Build ImageMagick
      run: ./build.ImageMagick.cmd ${{ matrix.quantumName }} ${{ matrix.platformName }}
      working-directory: build/windows

    - name: Update resource files
      run: ./update.resourcefiles.ps1
      working-directory: build/windows

    - name: Build Native
      run: ./build.Native.cmd ${{ matrix.quantumName }} ${{ matrix.platformName }}
      working-directory: build/windows

    - name: Copy Native
      run: ./copy.Native.ps1 -quantumName ${{ matrix.quantumName }} -platformName ${{ matrix.platformName }} -destination ../../artifacts
      working-directory: build/windows

    - name: Sign library
      uses: dlemstra/code-sign-action@v1
      with:
        certificate: '${{ secrets.IMAGEMAGICK_CERTIFICATE }}'
        folder: 'artifacts\windows\Release${{ matrix.quantumName }}\${{ matrix.platformName }}'

    - name: Upload library
      uses: actions/upload-artifact@v1
      with:
        name: windows
        path: artifacts/windows

    - name: Upload resources
      uses: actions/upload-artifact@v1
      with:
        name: resources
        path: artifacts/resources

  metadata:
    name: 'Metadata'
    runs-on: windows-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: ./install.dependencies.ps1
      working-directory: build/windows

    - name: Clone ImageMagick libraries
      run: ./checkout.cmd
      working-directory: src/ImageMagick

    - name: Create metadata
      run: ./create.metadata.ps1 -destination ../../artifacts
      working-directory: build/metadata

    - name: Upload metadata
      uses: actions/upload-artifact@v1
      with:
        name: metadata
        path: artifacts

  wasm:
    name: 'WASM'
    container:
      image: emscripten/emsdk:2.0.32
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: ./install.dependencies.sh
      working-directory: build/wasm

    - name: Clone ImageMagick libraries
      run: ./checkout.sh wasm ../../../artifacts
      working-directory: src/ImageMagick

    - name: Apply patches
      run: ../../../build/wasm/patches/install.patches.sh
      working-directory: src/ImageMagick/libraries

    - name: Build libraries
      run: ../../../build/wasm/build.libraries.sh ../../../build/libraries
      working-directory: src/ImageMagick/libraries

    - name: Build ImageMagick
      run: ../../../build/wasm/build.ImageMagick.sh
      working-directory: src/ImageMagick/libraries

    - name: Build Native
      run: ../../build/wasm/build.Native.sh
      working-directory: src/Magick.Native

    - name: Create type definition
      run: npm install && npm run publish
      working-directory: src/create-type-definition

    - name: Copy Native
      run: ../../build/wasm/copy.Native.sh ../../artifacts
      working-directory: src/Magick.Native

    - name: Upload library
      uses: actions/upload-artifact@v1
      with:
        name: wasm
        path: artifacts

  verify_linux:
    name: 'Verify Linux'
    needs:
      - linux
    runs-on: ubuntu-latest

    strategy:
      matrix:
        image:
          - 'ubuntu:16.04'
          - 'ubuntu:18.04'
          - 'ubuntu:20.04'
          - 'ubuntu:latest'
          - 'centos:7'
          - 'centos:8'
          - 'centos:latest'
          - 'mcr.microsoft.com/dotnet/aspnet:latest'
          - 'mcr.microsoft.com/dotnet/runtime:3.1'
          - 'mcr.microsoft.com/dotnet/runtime:latest'

    container:
      image: ${{ matrix.image }}

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Download linux library
      uses: actions/download-artifact@v2
      with:
        name: linux

    - name: Verify Native
      run: build/linux/verify.Native.sh .

  verify_linux_openmp:
    name: 'Verify Linux OpenMP'
    needs:
      - linux_openmp
    runs-on: ubuntu-latest

    strategy:
      matrix:
        image:
          - 'ubuntu:16.04'
          - 'ubuntu:18.04'
          - 'ubuntu:20.04'
          - 'ubuntu:latest'
          - 'centos:7'
          - 'centos:8'
          - 'centos:latest'
          - 'mcr.microsoft.com/dotnet/aspnet:latest'
          - 'mcr.microsoft.com/dotnet/runtime:3.1'
          - 'mcr.microsoft.com/dotnet/runtime:latest'

    container:
      image: ${{ matrix.image }}

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Download linux library
      uses: actions/download-artifact@v2
      with:
        name: linux-openmp

    - name: Verify Native
      run: build/linux-openmp/verify.Native.sh .

  verify_linux_musl:
    name: 'Verify Linux musl'
    needs:
      - linux_musl
    runs-on: ubuntu-latest

    strategy:
      matrix:
        image:
          - 'alpine:latest'
          - 'mcr.microsoft.com/dotnet/aspnet:5.0-alpine'
          - 'mcr.microsoft.com/dotnet/runtime:3.1-alpine'
          - 'mcr.microsoft.com/dotnet/runtime:5.0-alpine'

    container:
      image: ${{ matrix.image }}

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Download linux-musl library
      uses: actions/download-artifact@v2
      with:
        name: linux-musl

    - name: Verify Native
      run: build/linux-musl/verify.Native.sh .

  verify_linux_arm64:
    name: 'Verify Linux Arm64'
    needs:
      - linux_arm64
    runs-on: ubuntu-latest

    strategy:
      matrix:
        image:
          - 'ubuntu:16.04'
          - 'ubuntu:18.04'
          - 'ubuntu:20.04'
          - 'ubuntu:latest'
          - 'centos:7'
          - 'centos:8'
          - 'centos:latest'
          - 'mcr.microsoft.com/dotnet/aspnet:latest'
          - 'mcr.microsoft.com/dotnet/runtime:3.1'
          - 'mcr.microsoft.com/dotnet/runtime:latest'

    container:
      image: ${{ matrix.image }}

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Download linux library
      uses: actions/download-artifact@v2
      with:
        name: linux-arm64

    - name: Verify Native
      run: build/linux-arm64/verify.Native.sh .

  publish_dotnet:
    name: 'Publish .NET library'
    needs:
      - verify_linux
      - verify_linux_openmp
      - verify_linux_musl
      - verify_linux_arm64
      - macos
      - windows
      - metadata
    runs-on: windows-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: ./install.dependencies.ps1
      working-directory: build/windows

    - name: Download linux library
      uses: actions/download-artifact@v1
      with:
        name: linux
        path: publish\dotnet\files\linux

    - name: Download linux OpenMP library
      uses: actions/download-artifact@v1
      with:
        name: linux-openmp
        path: publish\dotnet\files\linux

    - name: Download linux musl library
      uses: actions/download-artifact@v1
      with:
        name: linux-musl
        path: publish\dotnet\files\linux-musl

    - name: Download linux arm64 library
      uses: actions/download-artifact@v1
      with:
        name: linux-arm64
        path: publish\dotnet\files\linux-arm64

    - name: Download macos library
      uses: actions/download-artifact@v1
      with:
        name: macos
        path: publish\dotnet\files\macos

    - name: Download windows library
      uses: actions/download-artifact@v1
      with:
        name: windows
        path: publish\dotnet\files\windows

    - name: Download resources
      uses: actions/download-artifact@v1
      with:
        name: resources
        path: publish\dotnet\files\resources

    - name: Download metadata
      uses: actions/download-artifact@v1
      with:
        name: metadata
        path: publish\dotnet\files\metadata

    - name: Create NuGet package
      run: ./publish.ps1 -destination ../../artifacts
      working-directory: publish/dotnet

    - name: Upload NuGet package
      if: github.event_name != 'pull_request'
      working-directory: publish/dotnet
      run: |
        dotnet tool install gpr -g
        $file = Get-ChildItem -Path . -Recurse -Filter *.nupkg | Select -First 1
        gpr push $file.FullName -r vornet/Magick.Native -k ${{ secrets.GITHUB_TOKEN }}

  publish_wasm:
    name: 'Publish WASM library'
    needs:
      - wasm
    runs-on: windows-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: ./install.dependencies.ps1
      working-directory: build/windows

    - name: Download wasm library
      uses: actions/download-artifact@v1
      with:
        name: wasm
        path: publish\wasm\files

    - uses: actions/setup-node@v1
      with:
        node-version: 12
        registry-url: https://npm.pkg.github.com
        scope: '@dlemstra'

    - name: Create NPM package
      run: ./publish.ps1 -destination artifacts
      working-directory: publish/wasm

    - name: Publish NPM package
      if: github.event_name != 'pull_request'
      run: npm publish
      working-directory: publish/wasm/files
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
